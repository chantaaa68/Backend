// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication.Context;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AWSDbContext))]
    [Migration("20250806132117_firstCreate")]
    partial class firstCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("登録日時");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("削除日時");

                    b.Property<int>("IconId")
                        .HasColumnType("int")
                        .HasComment("アイコンID");

                    b.Property<bool>("InoutFlg")
                        .HasColumnType("tinyint(1)")
                        .HasComment("出入金フラグ");

                    b.Property<int>("KakeiboID")
                        .HasColumnType("int")
                        .HasComment("家計簿テーブルID");

                    b.Property<string>("KategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("カテゴリ名");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新日時");

                    b.HasKey("Id");

                    b.HasIndex("IconId")
                        .IsUnique();

                    b.HasIndex("KakeiboID");

                    b.ToTable("Kategories");
                });

            modelBuilder.Entity("Backend.Model.Icon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("登録日時");

                    b.Property<string>("DefalultIconName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("表示名");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("削除日時");

                    b.Property<string>("OfficialIconName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("アイコン名");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新日時");

                    b.HasKey("Id");

                    b.ToTable("Icons");
                });

            modelBuilder.Entity("Backend.Model.Kakeibo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("登録日時");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("削除日時");

                    b.Property<string>("KakeiboExplanation")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasComment("説明文");

                    b.Property<string>("KakeiboName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("家計簿名");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新日時");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("ユーザーID");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Kakeibo");
                });

            modelBuilder.Entity("Backend.Model.KakeiboItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("カテゴリID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("登録日時");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("削除日時");

                    b.Property<bool>("InoutFlg")
                        .HasColumnType("tinyint(1)")
                        .HasComment("出入金フラグ");

                    b.Property<int>("ItemAmount")
                        .HasColumnType("int")
                        .HasComment("金額");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("名前");

                    b.Property<int>("ItemOptionId")
                        .HasColumnType("int")
                        .HasComment("オプションID");

                    b.Property<int>("KakeiboId")
                        .HasColumnType("int")
                        .HasComment("家計簿テーブルID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新日時");

                    b.Property<DateTime>("UsedDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("出入金日付");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ItemOptionId");

                    b.HasIndex("KakeiboId");

                    b.ToTable("KakeiboItems");
                });

            modelBuilder.Entity("Backend.Model.KakeiboItemOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("カテゴリID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("登録日時");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("削除日時");

                    b.Property<DateTime>("FixedEndDate")
                        .HasMaxLength(20)
                        .HasColumnType("datetime(6)")
                        .HasComment("固定費終了日時");

                    b.Property<DateTime>("FixedStartDate")
                        .HasMaxLength(20)
                        .HasColumnType("datetime(6)")
                        .HasComment("固定費開始日時");

                    b.Property<int>("Frequency")
                        .HasColumnType("int")
                        .HasComment("固定費頻度");

                    b.Property<bool>("InoutFlg")
                        .HasColumnType("tinyint(1)")
                        .HasComment("出入金フラグ");

                    b.Property<int>("ItemAmount")
                        .HasColumnType("int")
                        .HasComment("金額");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("名前");

                    b.Property<int>("KakeiboId")
                        .HasColumnType("int")
                        .HasComment("家計簿ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新日時");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KakeiboId");

                    b.HasIndex("UserId");

                    b.ToTable("KakeiboItemOptions");
                });

            modelBuilder.Entity("Backend.Model.NewsletterTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("登録日時");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("削除日時");

                    b.Property<string>("MailBody")
                        .IsRequired()
                        .HasMaxLength(5120)
                        .HasColumnType("varchar(5120)")
                        .HasComment("メール本文");

                    b.Property<string>("MailTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("メールタイトル");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新日時");

                    b.HasKey("Id");

                    b.ToTable("NewsletterTemplates");
                });

            modelBuilder.Entity("WebApplication.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("登録日時");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("削除日時");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("メールアドレス");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("ユーザー名");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新日時");

                    b.Property<string>("UserHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("ユーザーHash");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Model.Category", b =>
                {
                    b.HasOne("Backend.Model.Icon", "Icon")
                        .WithOne("Category")
                        .HasForeignKey("Backend.Model.Category", "IconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Kakeibo", "Kakeibo")
                        .WithMany("Categories")
                        .HasForeignKey("KakeiboID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icon");

                    b.Navigation("Kakeibo");
                });

            modelBuilder.Entity("Backend.Model.Kakeibo", b =>
                {
                    b.HasOne("WebApplication.Model.User", "User")
                        .WithOne("Kakeibo")
                        .HasForeignKey("Backend.Model.Kakeibo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Model.KakeiboItem", b =>
                {
                    b.HasOne("Backend.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.KakeiboItemOption", "KakeiboItemOption")
                        .WithMany("KakeiboItems")
                        .HasForeignKey("ItemOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Kakeibo", "Kakeibo")
                        .WithMany("KakeiboItems")
                        .HasForeignKey("KakeiboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Kakeibo");

                    b.Navigation("KakeiboItemOption");
                });

            modelBuilder.Entity("Backend.Model.KakeiboItemOption", b =>
                {
                    b.HasOne("Backend.Model.Kakeibo", "Kakeibo")
                        .WithMany()
                        .HasForeignKey("KakeiboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication.Model.User", null)
                        .WithMany("KakeiboItemOptions")
                        .HasForeignKey("UserId");

                    b.Navigation("Kakeibo");
                });

            modelBuilder.Entity("Backend.Model.Icon", b =>
                {
                    b.Navigation("Category")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Model.Kakeibo", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("KakeiboItems");
                });

            modelBuilder.Entity("Backend.Model.KakeiboItemOption", b =>
                {
                    b.Navigation("KakeiboItems");
                });

            modelBuilder.Entity("WebApplication.Model.User", b =>
                {
                    b.Navigation("Kakeibo")
                        .IsRequired();

                    b.Navigation("KakeiboItemOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
